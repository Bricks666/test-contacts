{"version":3,"file":"static/js/109.c61c49e6.chunk.js","mappings":"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","sources":["components/ContactSearch/styles.ts","components/ContactSearch/scheme.ts","utils/prepareLink.ts","components/ContactSearch/ContactSearch.tsx","components/ContactsList/styles.ts","hooks/useToogle.ts","components/ContactCard/ContactCard.tsx","components/ContactsList/ContactsList.tsx","components/CreateContactForm/styles.ts","components/CreateContactForm/CreateContactForm.tsx","layouts/MainLayout/styles.ts","components/Header/styles.ts","components/Header/Header.tsx","pages/Contacts/styles.ts","layouts/MainLayout/MainLayout.tsx","pages/Contacts/ContactsPage.tsx"],"sourcesContent":["import { styled } from '@mui/material/styles';\n\nexport const StyledForm = styled('form')`\n\tdisplay: grid;\n\tgrid-template-columns: 1fr max-content;\n\tgap: 15px;\n\n\t@media (max-width: 540px) {\n\t\tgrid-template-columns: 1fr;\n\t}\n`;\n","import Joi from 'joi';\nimport { SearchContact } from './types';\n\nexport const searchContactScheme = Joi.object<SearchContact>({\n\tsearch: Joi.string().allow(''),\n});\n","import { Location } from 'react-router-dom';\n\nexport interface PrepareLinkParams {\n\treadonly path?: string;\n\treadonly query?: Record<string, string | undefined>;\n\treadonly keepOldQuery?: boolean;\n}\n\nconst prepareLink = (location: Location, params: PrepareLinkParams): string => {\n\tconst { hash, pathname, search } = location;\n\tconst { path, keepOldQuery = false, query = {} } = params;\n\tconst to = path ?? pathname;\n\n\tconst newQuery = new URLSearchParams(keepOldQuery ? search : {});\n\tObject.entries(query).forEach(([key, value]) => {\n\t\tif (value) {\n\t\t\tnewQuery.set(key, value);\n\t\t}\n\t});\n\treturn `${to}?${newQuery}#${hash}`;\n};\n\nexport default prepareLink;\n","import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Control, SubmitHandler, useForm } from 'react-hook-form';\nimport { Button } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { joiResolver } from '@hookform/resolvers/joi';\nimport { CommonProps } from '@/interfaces/common';\nimport { StyledForm } from './styles';\nimport { Field } from '../Field';\nimport { SearchContact } from './types';\nimport { searchContactScheme } from './scheme';\nimport prepareLink from '@/utils/prepareLink';\nimport { GET_PARAMS } from '@/consts/getParams';\n\nexport interface ContactSearchProps extends CommonProps {}\n\nexport const ContactSearch: React.FC<ContactSearchProps> = React.memo(\n\tfunction ContactSearch(props) {\n\t\tconst { className } = props;\n\t\tconst { control, handleSubmit } = useForm<SearchContact>({\n\t\t\tdefaultValues: {\n\t\t\t\tsearch: '',\n\t\t\t},\n\t\t\tresolver: joiResolver(searchContactScheme),\n\t\t});\n\t\tconst navigate = useNavigate();\n\t\tconst location = useLocation();\n\n\t\tconst onSubmit = React.useCallback<SubmitHandler<SearchContact>>(\n\t\t\t({ search }) => {\n\t\t\t\tnavigate(\n\t\t\t\t\tprepareLink(location, {\n\t\t\t\t\t\tquery: {\n\t\t\t\t\t\t\t[GET_PARAMS.search]: search,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t},\n\t\t\t[navigate, location]\n\t\t);\n\n\t\treturn (\n\t\t\t<StyledForm className={className} onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Field\n\t\t\t\t\tname='search'\n\t\t\t\t\tcontrol={control as unknown as Control}\n\t\t\t\t\tlabel='Имя или значение контакта'\n\t\t\t\t/>\n\t\t\t\t<Button type='submit' variant='outlined' endIcon={<SearchIcon />}>\n\t\t\t\t\tИскать\n\t\t\t\t</Button>\n\t\t\t</StyledForm>\n\t\t);\n\t}\n);\n","import { CircularProgress } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledProgress = styled(CircularProgress)`\n\tmargin: 0 auto;\n`;\n","import { useCallback, useState } from 'react';\nimport { VoidFunction } from '@/interfaces/common';\n\ntype UseToggleResult = [boolean, VoidFunction];\n\nconst useToggle = (defaultValue = false): UseToggleResult => {\n\tconst [value, setValue] = useState(defaultValue);\n\n\tconst toggle = useCallback(\n\t\t() => setValue((currentValue) => !currentValue),\n\t\t[]\n\t);\n\n\treturn [value, toggle];\n};\n\nexport default useToggle;\n","import * as React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n\tIconButton,\n\tListItem,\n\tListItemIcon,\n\tListItemSecondaryAction,\n\tListItemText,\n\tListSubheader,\n\tMenu,\n\tMenuItem,\n} from '@mui/material';\nimport ListIcon from '@mui/icons-material/List';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { CommonProps } from '@/interfaces/common';\nimport { Contact, useDeleteContactMutation } from '@/models/contacts';\nimport useToggle from '@/hooks/useToogle';\nimport { MenuOption } from './types';\nimport { GET_PARAMS } from '@/consts/getParams';\nimport { POPUPS } from '@/consts/popups';\nimport prepareLink from '@/utils/prepareLink';\n\nexport interface ContactCardProps extends CommonProps, Contact {}\n\nexport const ContactCard: React.FC<ContactCardProps> = React.memo(\n\tfunction ContactCard(props) {\n\t\tconst { className, id, name, value: contactValue } = props;\n\n\t\tconst ref = React.useRef<HTMLButtonElement | null>(null);\n\t\tconst [trigger] = useDeleteContactMutation();\n\t\tconst [openMenu, toggleOpenMenu] = useToggle(false);\n\t\tconst location = useLocation();\n\n\t\tconst contactActions = React.useMemo<MenuOption[]>(\n\t\t\t() => [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Изменить',\n\t\t\t\t\thref: prepareLink(location, {\n\t\t\t\t\t\tquery: {\n\t\t\t\t\t\t\t[GET_PARAMS.popups]: POPUPS.editContact,\n\t\t\t\t\t\t\t[GET_PARAMS.contactId]: id.toString(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tkeepOldQuery: true,\n\t\t\t\t\t}),\n\t\t\t\t\tIcon: EditIcon,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Удалить',\n\t\t\t\t\tonClick: async () => trigger(id),\n\t\t\t\t\tIcon: DeleteIcon,\n\t\t\t\t},\n\t\t\t],\n\t\t\t[id, trigger, location.pathname, location.search, location.hash]\n\t\t);\n\n\t\treturn (\n\t\t\t<ListItem className={className}>\n\t\t\t\t<ListSubheader component='span'>{name}</ListSubheader>\n\t\t\t\t<ListItemText>{contactValue}</ListItemText>\n\t\t\t\t<ListItemSecondaryAction>\n\t\t\t\t\t<IconButton onClick={toggleOpenMenu} ref={ref}>\n\t\t\t\t\t\t<ListIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Menu open={openMenu} onClose={toggleOpenMenu} anchorEl={ref.current}>\n\t\t\t\t\t\t{contactActions.map(({ label, Icon, href, onClick }) => (\n\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\tcomponent={href ? Link : 'li'}\n\t\t\t\t\t\t\t\tto={href}\n\t\t\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\t\t\tkey={label}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{Icon && (\n\t\t\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t\t\t<Icon />\n\t\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</ListItemSecondaryAction>\n\t\t\t</ListItem>\n\t\t);\n\t}\n);\n","import * as React from 'react';\nimport { List, Typography } from '@mui/material';\nimport { CommonProps } from '@/interfaces/common';\nimport { StyledProgress } from './styles';\nimport useTypedSelector from '@/hooks/useTypedSelector';\nimport { getAuthId } from '@/models/auth';\nimport { useGetContactsQuery } from '@/models/contacts';\nimport { ContactCard } from '../ContactCard';\nimport useGetParams from '@/hooks/useGetParams';\nimport { GET_PARAMS } from '@/consts/getParams';\n\nexport interface ContactsListProps extends CommonProps {}\n\nexport const ContactsList: React.FC<ContactsListProps> = React.memo(\n\tfunction ContactsList(props) {\n\t\tconst { className } = props;\n\t\tconst userId = useTypedSelector(getAuthId);\n\t\tconst search = useGetParams(GET_PARAMS.search) || undefined;\n\t\tconst {\n\t\t\tdata = [],\n\t\t\tisLoading,\n\t\t\tisFetching,\n\t\t\tisError,\n\t\t} = useGetContactsQuery({\n\t\t\tuserId,\n\t\t\tsearch,\n\t\t});\n\n\t\tconst showLoading = isLoading || isFetching;\n\n\t\tif (isError) {\n\t\t\treturn (\n\t\t\t\t<Typography className={className} align='center'>\n\t\t\t\t\tЧто то пошло не так, повторите попытку позже\n\t\t\t\t</Typography>\n\t\t\t);\n\t\t}\n\t\tif (showLoading) {\n\t\t\treturn <StyledProgress className={className} />;\n\t\t}\n\t\tif (!data.length) {\n\t\t\treturn (\n\t\t\t\t<Typography className={className} align='center'>\n\t\t\t\t\tСписок контактов пуст\n\t\t\t\t</Typography>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<List className={className}>\n\t\t\t\t{data.map((contact) => (\n\t\t\t\t\t<ContactCard {...contact} key={contact.id} />\n\t\t\t\t))}\n\t\t\t</List>\n\t\t);\n\t}\n);\n","import { Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledForm = styled('form')`\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr max-content;\n\tgap: 10px;\n\n\t@media (max-width: 540px) {\n\t\tgrid-template-columns: 1fr;\n\t}\n`;\n\nexport const StyledLegend = styled(Typography)`\n\tgrid-column: span 3;\n\n\t@media (max-width: 540px) {\n\t\tgrid-column: span 1;\n\t\tjustify-self: center;\n\t}\n`;\n","import * as React from 'react';\nimport { useForm, SubmitHandler, Control, FieldValues } from 'react-hook-form';\nimport { Button } from '@mui/material';\nimport { joiResolver } from '@hookform/resolvers/joi';\nimport { CommonProps } from '@/interfaces/common';\nimport useTypedSelector from '@/hooks/useTypedSelector';\nimport { getAuthId } from '@/models/auth';\nimport { StyledForm, StyledLegend } from './styles';\nimport { CreateContact, useCreateContactMutation } from '@/models/contacts';\nimport { Field } from '../Field';\nimport { contactScheme } from '@/schemes/contact';\n\nexport interface CreateContactFormProps extends CommonProps {}\n\nexport const CreateContactForm: React.FC<CreateContactFormProps> = React.memo(\n\tfunction CreateContactForm(props) {\n\t\tconst { className } = props;\n\n\t\tconst userId = useTypedSelector(getAuthId);\n\t\tconst [trigger] = useCreateContactMutation();\n\t\tconst { control, handleSubmit, formState, reset } = useForm<CreateContact>({\n\t\t\tdefaultValues: {\n\t\t\t\tname: '',\n\t\t\t\tvalue: '',\n\t\t\t},\n\t\t\tresolver: joiResolver(contactScheme),\n\t\t});\n\n\t\tconst { isSubmitting, isDirty } = formState;\n\t\tconst disableButton = !isDirty || isSubmitting;\n\n\t\tconst onSubmit = React.useCallback<SubmitHandler<CreateContact>>(\n\t\t\tasync (data) => {\n\t\t\t\tawait trigger({\n\t\t\t\t\tuserId,\n\t\t\t\t\t...data,\n\t\t\t\t});\n\t\t\t\treset();\n\t\t\t},\n\t\t\t[userId, reset, trigger]\n\t\t);\n\n\t\treturn (\n\t\t\t<StyledForm className={className} onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<StyledLegend variant='h6'>Добавление контакта</StyledLegend>\n\t\t\t\t<Field\n\t\t\t\t\tname='name'\n\t\t\t\t\tcontrol={control as unknown as Control<FieldValues>}\n\t\t\t\t\tlabel='Имя контакта'\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tname='value'\n\t\t\t\t\tcontrol={control as unknown as Control<FieldValues>}\n\t\t\t\t\tlabel='Значение контакта'\n\t\t\t\t/>\n\t\t\t\t<Button variant='outlined' type='submit' disabled={disableButton}>\n\t\t\t\t\tДобавить\n\t\t\t\t</Button>\n\t\t\t</StyledForm>\n\t\t);\n\t}\n);\n","import { styled } from '@mui/material';\n\nexport const StyledContainer = styled('div')`\n\tdisplay: grid;\n\trow-gap: 20px; ;\n`;\n","import { Button } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledButton = styled(Button)`\n\tmargin-left: auto;\n`;\n","import * as React from 'react';\nimport { AppBar, Toolbar } from '@mui/material';\nimport { CommonProps } from '@/interfaces/common';\nimport useTypedDispatch from '@/hooks/useTypedDispatch';\nimport { logoutThunk } from '@/models/auth';\nimport { StyledButton } from './styles';\n\nexport interface HeaderProps extends CommonProps {}\n\nexport const Header: React.FC<HeaderProps> = React.memo(function Header(props) {\n\tconst { className } = props;\n\tconst dispatch = useTypedDispatch();\n\n\tconst onLogout = React.useCallback(() => {\n\t\tdispatch(logoutThunk());\n\t}, []);\n\n\treturn (\n\t\t<AppBar className={className} position='sticky'>\n\t\t\t<Toolbar>\n\t\t\t\t<StyledButton onClick={onLogout} color='inherit'>\n\t\t\t\t\tВыйти\n\t\t\t\t</StyledButton>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n});\n","import { styled } from '@mui/material/styles';\nimport { MainLayout } from '@/layouts/MainLayout';\n\nexport const StyledLayout = styled(MainLayout)`\n\tdisplay: grid;\n\tgap: 15px;\n`;\n","import * as React from 'react';\nimport { Container } from '@mui/material';\nimport { CommonProps } from '@/interfaces/common';\nimport { StyledContainer } from './styles';\nimport { Header } from '@/components/Header';\n\nexport interface MainLayoutProps extends CommonProps {}\n\nexport const MainLayout: React.FC<React.PropsWithChildren<MainLayoutProps>> = (\n\tprops\n) => {\n\tconst { className, children } = props;\n\treturn (\n\t\t<StyledContainer>\n\t\t\t<Header />\n\t\t\t<Container className={className} component='main'>\n\t\t\t\t{children}\n\t\t\t</Container>\n\t\t</StyledContainer>\n\t);\n};\n","import * as React from 'react';\nimport { Typography } from '@mui/material';\nimport { ContactSearch } from '@/components/ContactSearch';\nimport { ContactsList } from '@/components/ContactsList';\nimport { CreateContactForm } from '@/components/CreateContactForm';\nimport { StyledLayout } from './styles';\n\nconst ContactsPage: React.FC = () => {\n\treturn (\n\t\t<StyledLayout>\n\t\t\t<Typography variant='h2' align='center'>\n\t\t\t\tКонтакты\n\t\t\t</Typography>\n\t\t\t<CreateContactForm />\n\t\t\t<ContactSearch />\n\t\t\t<ContactsList />\n\t\t</StyledLayout>\n\t);\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","searchContactScheme","Joi","search","allow","location","params","hash","pathname","path","keepOldQuery","query","to","newQuery","URLSearchParams","Object","entries","forEach","key","value","set","ContactSearch","React","props","className","useForm","defaultValues","resolver","joiResolver","control","handleSubmit","navigate","useNavigate","useLocation","onSubmit","prepareLink","GET_PARAMS","Field","name","label","Button","type","variant","endIcon","Search","StyledProgress","CircularProgress","defaultValue","useState","setValue","toggle","useCallback","currentValue","ContactCard","id","contactValue","ref","useDeleteContactMutation","trigger","useToggle","openMenu","toggleOpenMenu","contactActions","href","POPUPS","toString","Icon","EditIcon","onClick","DeleteIcon","ListItem","ListSubheader","component","ListItemText","ListItemSecondaryAction","IconButton","Menu","open","onClose","anchorEl","current","map","MenuItem","Link","ListItemIcon","ContactsList","userId","useTypedSelector","getAuthId","useGetParams","undefined","useGetContactsQuery","data","isLoading","isFetching","showLoading","isError","Typography","align","length","List","contact","StyledLegend","CreateContactForm","useCreateContactMutation","contactScheme","formState","reset","isSubmitting","disableButton","isDirty","disabled","StyledContainer","StyledButton","Header","dispatch","useTypedDispatch","onLogout","logoutThunk","AppBar","position","Toolbar","color","StyledLayout","children","Container"],"sourceRoot":""}